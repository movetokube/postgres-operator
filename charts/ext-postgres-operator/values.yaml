# Default values for chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

revisionHistoryLimit: 10

image:
  repository: ghcr.io/movetokube/postgres-operator
  pullPolicy: IfNotPresent
  pullSecrets: []
  # e.g. for pullSecrets:
  # - name: my-secret

  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# Override chart name, defaults to Chart.name
nameOverride: ""
# Full chart name override
fullnameOverride: ""

serviceAccount:
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  automount: true

deploymentAnnotations: {}

podAnnotations: {}

# Additional labels to add to the pod.
podLabels: {}

podSecurityContext:
  runAsNonRoot: true
  # fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - "ALL"

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi


# Define liveness and readiness Probes
livenessProbe:
  httpGet:
    path: /healthz
    port: 8081
  initialDelaySeconds: 15
  periodSeconds: 20
readinessProbe:
  httpGet:
    path: /readyz
    port: 8081
  initialDelaySeconds: 5
  periodSeconds: 10

# Which namespace to watch in kubernetes, empty string means all namespaces
watchNamespace: ""

# Define connection to postgres database server
postgres:
  # postgres hostname
  host: "localhost"
  # postgres admin user and password ( ignored if existingSecret or ExternalSecret is set )
  user: "admin"
  password: "password"
  # additional connection args to pg driver (Example "sslmode=disable")
  uri_args: ""
  # postgres cloud provider, could be AWS, Azure, GCP or empty (default)
  cloud_provider: ""
  # default database to use
  default_database: "postgres"

# Volumes to add to the pod.
volumes: []

# Volumes to mount onto the pod.
volumeMounts: []

# Existing secret where values to connect to Postgres are defined.
# If not set a new secret will be created, filled with information under the postgres key above.
# If ExternalSecret is set, existingSecret is ignored.
existingSecret: ""

# Support for ExternalSecret Operator to fetch Postgres credentials from an external secret store.
externalSecret: {}
  # secretStore: "aws-secretsmanager-euc1"                   # (Mandatory) Name of the SecretStore or ClusterSecretStore to reference in the ExternalSecret
  # remoteKey: "rds!db-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx" # (Mandatory) Remote key in the external secret store where Postgres credentials are stored
  # namespace: ""                                          # (Optional), defaults to release namespace
  # secretStoreKind: ""                                    # (Optional), defaults to SecretStore / SecretStore or ClusterSecretStore
  # refreshInterval: "2s"                                  # (Optional), defaults to SecretStore / SecretStore or ClusterSecretStore

# Additional environment variables to add to the pod (map of key / value)
env: {}
  # POSTGRES_INSTANCE: "XXXXXXXXXX"
  # POSTGRES_CLOUD_PROVIDER: "AWS"

# ServiceMonitor is a custom resource defined by the Prometheus Operator
serviceMonitor: {}
  # interval: 30s
  # scrapeTimeout: 10s
  # relabeling: []
  #   # - targetLabel: app
  #   #   replacement: '{{ include "chart.name" . }}'
  # additonalLabels: {}
  #   # e.g. release label of the prometheus operator
  #   # release: prometheus-operator
  # additionalAnnotations: {}
  #   # e.g. {}

nodeSelector: {}

tolerations: []
